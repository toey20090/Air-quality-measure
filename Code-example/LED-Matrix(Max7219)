/**
 * @author Teerapong Singthong <st.teerapong@gmail.com>
 */
#include <avr/pgmspace.h>
#include <LedControl.h>
#include <math.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h> 
#include <SPI.h>
//------------------------------------------------------------  WiFi --------------------------------------------------------------------------
const char* ssid = ".ST-Hall";
const char* password = "Songtham1126";
WiFiClient wifiClient;
//-----------------------------------------------------------------------     mqtt setting       ---------------------------------------------------------------------------------
#define SERVER          "io.adafruit.com"
#define SERVERPORT      1883
#define MQTT_USERNAME   "Toeykmutt"
#define MQTT_KEY        "aio_GrrI53uLgvECKedkVMz0EcqFS99K"
PubSubClient client(wifiClient);
String PMvalue,Tempvalue,Data;


const int numDevices = 4;       // number of MAX7219s used
const long scrollDelay = 80;   // adjust scrolling speed

unsigned long bufferLong [14] = {0};

/*
  pin 12 - DataIn
  pin 11 - CLK
  pin 10 - CS
  VCC - 5V
  GND - GND
*/
LedControl lc = LedControl(13, 14, 12, numDevices);//LedControl lc = LedControl(12, 11, 10, numDevices);
unsigned char PM[50];
unsigned char Temp[50];
//const unsigned char start[] PROGMEM = {"Start"};



void setup() {
  for (int x = 0; x < numDevices; x++) {
    lc.shutdown(x, false);      //The MAX72XX is in power-saving mode on startup
    lc.setIntensity(x, 1);      // Set the brightness to default value
    lc.clearDisplay(x);         // and clear the display      
  }
  
   Serial.begin(9600);
   WiFi.mode(WIFI_STA);
   setup_wifi();
   client.setServer(SERVER,SERVERPORT);
   client.setCallback(callback);   
   while (!client.connected()) 
   {
    Serial.println("Connecting to MQTT...");
 
    if (client.connect("ESP8266Recive", MQTT_USERNAME, MQTT_KEY) ) 
    {
 
      Serial.println("connected");  
 
    } else {
 
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
 
    }
   }
  
    client.subscribe("Toeykmutt/feeds/pm2-dot-5");
    client.subscribe("Toeykmutt/feeds/temperature");
    //scrollMessage(start);

         
   
}

void loop() 
{
  client.loop();
  while (!client.connected()) 
   {
    Serial.println("Connecting to MQTT...");
 
    if (client.connect("ESP8266Recive", MQTT_USERNAME, MQTT_KEY) ) 
    {
 
      Serial.println("connected");  
    client.subscribe("Toeykmutt/feeds/pm2-dot-5");
    client.subscribe("Toeykmutt/feeds/temperature");
 
    } else {
 
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
 
    }
   }
      
}

/**
 * Define Set of Characters
 */
const unsigned char font5x7 [] PROGMEM = {      // Numeric Font Matrix (Arranged as 7x font data + 1x kerning data)
  B00000000,  //Space (Char 0x20)
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  6,

  B11100000,  //!
  B01100000,
  B11100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  3,

  B10100000,  //"
  B10100000,
  B10100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  4,

  B01010000,  //#
  B01010000,
  B11111000,
  B01010000,
  B11111000,
  B01010000,
  B01010000,
  6,

  B00100000,  //$
  B01111000,
  B10100000,
  B01110000,
  B00101000,
  B11110000,
  B00100000,
  6,

  B11000000,  //%
  B11001000,
  B00010000,
  B00100000,
  B01000000,
  B10011000,
  B00011000,
  6,

  B01100000,  //&
  B10010000,
  B10100000,
  B01000000,
  B10101000,
  B10010000,
  B01101000,
  6,

  B11000000,  //'
  B01000000,
  B10000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  3,

  B00100000,  //(
  B01000000,
  B10000000,
  B10000000,
  B10000000,
  B01000000,
  B00100000,
  4,

  B10000000,  //)
  B01000000,
  B00100000,
  B00100000,
  B00100000,
  B01000000,
  B10000000,
  4,

  B11000000,  //*
  B11000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  2,

  B00000000,  //+
  B00100000,
  B00100000,
  B11111000,
  B00100000,
  B00100000,
  B00000000,
  6,

  B00000000,  //,
  B00000000,
  B00000000,
  B00000000,
  B11000000,
  B01000000,
  B10000000,
  3,

  B00000000,  //-
  B00000000,
  B11111000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  6,

  B00000000,  //.
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B11000000,
  B11000000,
  3,

  B00000000,  ///
  B00000000,
  B00100000,
  B01000000,
  B10000000,
  B00000000,
  B00000000,
  4,

  B01100000,  //0
  B10010000,
  B10010000,
  B10010000,
  B10010000,
  B10010000,
  B01100000,
  5,

  B01000000,  //1
  B11000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B11100000,
  4,

  B01110000,  //2
  B10001000,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B11111000,
  6,

  B11111000,  //3
  B00010000,
  B00100000,
  B00010000,
  B00001000,
  B10001000,
  B01110000,
  6,

  B00010000,  //4
  B00110000,
  B01010000,
  B10010000,
  B11111000,
  B00010000,
  B00010000,
  6,

  B11111000,  //5
  B10000000,
  B11110000,
  B00001000,
  B00001000,
  B10001000,
  B01110000,
  6,

  B00110000,  //6
  B01000000,
  B10000000,
  B11110000,
  B10001000,
  B10001000,
  B01110000,
  6,

  B11111000,  //7
  B10001000,
  B00001000,
  B00010000,
  B00100000,
  B00100000,
  B00100000,
  6,

  B01110000,  //8
  B10001000,
  B10001000,
  B01110000,
  B10001000,
  B10001000,
  B01110000,
  6,

  B01110000,  //9
  B10001000,
  B10001000,
  B01111000,
  B00001000,
  B00010000,
  B01100000,
  6,

  B00000000,  //:
  B11000000,
  B11000000,
  B00000000,
  B11000000,
  B11000000,
  B00000000,
  3,

  B00000000,  //;
  B11000000,
  B11000000,
  B00000000,
  B11000000,
  B01000000,
  B10000000,
  3,

  B00010000,  //<
  B00100000,
  B01000000,
  B10000000,
  B01000000,
  B00100000,
  B00010000,
  5,

  B00000000,  //=
  B00000000,
  B11100000,
  B00000000,
  B11100000,
  B00000000,
  B00000000,
  4,

  B10000000,  //>
  B01000000,
  B00100000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  5,

  B01110000,  //?
  B10001000,
  B00001000,
  B00010000,
  B00100000,
  B00000000,
  B00100000,
  6,

  B01110000,  //@
  B10001000,
  B00001000,
  B01101000,
  B10101000,
  B10101000,
  B01110000,
  6,

  B00000000,  //A
  B01100000,
  B10010000,
  B10010000,
  B11110000,
  B10010000,
  B10010000,
  6,

  B11110000,  //B
  B10001000,
  B10001000,
  B11110000,
  B10001000,
  B10001000,
  B11110000,
  6,

  B0000000,  //C
  B01100000,
  B10010000,
  B10000000,
  B10000000,
  B10010000,
  B01100000,
  5,

  B11100000,  //D
  B10010000,
  B10001000,
  B10001000,
  B10001000,
  B10010000,
  B11100000,
  6,

  B11111000,  //E
  B10000000,
  B10000000,
  B11110000,
  B10000000,
  B10000000,
  B11111000,
  6,

  B11111000,  //F
  B10000000,
  B10000000,
  B11110000,
  B10000000,
  B10000000,
  B10000000,
  6,

  B01110000,  //G
  B10001000,
  B10000000,
  B10111000,
  B10001000,
  B10001000,
  B01111000,
  6,

  B10001000,  //H
  B10001000,
  B10001000,
  B11111000,
  B10001000,
  B10001000,
  B10001000,
  6,

  B11100000,  //I
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B11100000,
  4,

  B00111000,  //J
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B10010000,
  B01100000,
  6,

  B10001000,  //K
  B10010000,
  B10100000,
  B11000000,
  B10100000,
  B10010000,
  B10001000,
  6,

  B10000000,  //L
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B11111000,
  6,

  B10001000,  //M
  B11011000,
  B10101000,
  B10101000,
  B10001000,
  B10001000,
  B10001000,
  6,
  
  B10001000,  //N
  B10001000,
  B11001000,
  B10101000,
  B10011000,
  B10001000,
  B10001000,
  6,

  B01110000,  //O
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B01110000,
  6,

  B11110000,  //P
  B10001000,
  B10001000,
  B11110000,
  B10000000,
  B10000000,
  B10000000,
  6,

  B01110000,  //Q
  B10001000,
  B10001000,
  B10001000,
  B10101000,
  B10010000,
  B01101000,
  6,

  B11110000,  //R
  B10001000,
  B10001000,
  B11110000,
  B10100000,
  B10010000,
  B10001000,
  6,

  B01111000,  //S
  B10000000,
  B10000000,
  B01110000,
  B00001000,
  B00001000,
  B11110000,
  6,

  B11111000,  //T
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  6,

  B10001000,  //U
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B01110000,
  6,

  B10001000,  //V
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B01010000,
  B00100000,
  6,

  B10001000,  //W
  B10001000,
  B10001000,
  B10101000,
  B10101000,
  B10101000,
  B01010000,
  6,

  B10001000,  //X
  B10001000,
  B01010000,
  B00100000,
  B01010000,
  B10001000,
  B10001000,
  6,

  B10001000,  //Y
  B10001000,
  B10001000,
  B01010000,
  B00100000,
  B00100000,
  B00100000,
  6,

  B11111000,  //Z
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B11111000,
  6,

  B11100000,  //[
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B11100000,
  4,

  B00000000,  //(Backward Slash)
  B10000000,
  B01000000,
  B00100000,
  B00010000,
  B00001000,
  B00000000,
  6,

  B11100000,  //]
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B11100000,
  4,

  B00100000,  //^
  B01010000,
  B10001000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  6,

  B00000000,  //_
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B11111000,
  6,

  B10000000,  //`
  B01000000,
  B00100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  4,

  B00000000,  //a
  B00000000,
  B01110000,
  B00001000,
  B01111000,
  B10001000,
  B01111000,
  6,

  B10000000,  //b
  B10000000,
  B10110000,
  B11001000,
  B10001000,
  B10001000,
  B11110000,
  6,

  B00000000,  //c
  B00000000,
  B01110000,
  B10001000,
  B10000000,
  B10001000,
  B01110000,
  6,

  B00001000,  //d
  B00001000,
  B01101000,
  B10011000,
  B10001000,
  B10001000,
  B01111000,
  6,

  B00000000,  //e
  B00000000,
  B01100000,
  B10010000,
  B11110000,
  B10000000,
  B01110000,
  5,

  B00110000,  //f
  B01001000,
  B01000000,
  B11100000,
  B01000000,
  B01000000,
  B01000000,
  6,

  B00000000,  //g
  B00000000,
  B01000000,
  B10100000,
  B01100000,
  B00100000,
  B01100000,
  4,

  B10000000,  //h
  B10000000,
  B10110000,
  B11001000,
  B10001000,
  B10001000,
  B10001000,
  6,

  B00000000,  //i
  B01000000,
  B00000000,
  B11000000,
  B01000000,
  B01000000,
  B11100000,
  4,

  B00010000,  //j
  B00000000,
  B00110000,
  B00010000,
  B00010000,
  B10010000,
  B01100000,
  5,

  B10000000,  //k
  B10000000,
  B10010000,
  B10100000,
  B11000000,
  B10100000,
  B10010000,
  5,

  B11000000,  //l
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B11100000,
  4,

  B00000000,  //m
  B00000000,
  B00000000,
  B11011000,
  B10101000,
  B10101000,
  B10001000,
  5,

  B00000000,  //n
  B00000000,
  B00000000,
  B10110000,
  B11010000,
  B10010000,
  B10010000,
  5,

  B00000000,  //o
  B00000000,
  B00000000,
  B01100000,
  B1001000,
  B1001000,
  B01100000,
  5,

  B00000000,  //p
  B00000000,
  B11100000,
  B10010000,
  B11100000,
  B10000000,
  B10000000,
  5,

  B00000000,  //q
  B00000000,
  B01101000,
  B10011000,
  B01111000,
  B00001000,
  B00001000,
  6,

  B00000000,  //r
  B00000000,
  B10110000,
  B11001000,
  B10000000,
  B10000000,
  B10000000,
  6,

  B00000000,  //s
  B00000000,
  B01110000,
  B10000000,
  B01110000,
  B00001000,
  B11110000,
  6,

  B01000000,  //t
  B01000000,
  B11100000,
  B01000000,
  B01000000,
  B01001000,
  B00110000,
  6,

  B00000000,  //u
  B00000000,
  B10010000,
  B10010000,
  B01100000,
  B00000000,
  B00000000,
  5,

  B00000000,  //v
  B00000000,
  B10001000,
  B10001000,
  B10001000,
  B01010000,
  B00100000,
  6,

  B00000000,  //w
  B00000000,
  B10001000,
  B10101000,
  B10101000,
  B10101000,
  B01010000,
  6,

  B00000000,  //x
  B00000000,
  B10001000,
  B01010000,
  B00100000,
  B01010000,
  B10001000,
  6,

  B00000000,  //y
  B00000000,
  B10001000,
  B10001000,
  B01111000,
  B00001000,
  B01110000,
  6,

  B00000000,  //z
  B00000000,
  B11111000,
  B00010000,
  B00100000,
  B01000000,
  B11111000,
  6,

  B00100000,  //{
  B01000000,
  B01000000,
  B10000000,
  B01000000,
  B01000000,
  B00100000,
  4,

  B10000000,  //|
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  2,

  B10000000,  //}
  B01000000,
  B01000000,
  B00100000,
  B01000000,
  B01000000,
  B10000000,
  4,

  B00000000,  //~
  B00000000,
  B00000000,
  B01101000,
  B10010000,
  B00000000,
  B00000000,
  6,

  B01100000,  // (Char 0x7F)
  B10010000,
  B10010000,
  B01100000,
  B00000000,
  B00000000,
  B00000000,
  5

};


void scrollFont() {
  for (int counter = 0x20; counter < 0x80; counter++) {
    loadBufferLong(counter);
    delay(500);
  }
}


// Scroll Message
void scrollMessage(const unsigned char * messageString) {
  int counter = 0;
  int myChar = 0;
  do {
    // read back a char
    myChar =  pgm_read_byte_near(messageString + counter);
    if (myChar != 0) {
      loadBufferLong(myChar);
    }
    counter++;
  }
  while (myChar != 0);
}
// Load character into scroll buffer
void loadBufferLong(int ascii) {
  if (ascii >= 0x20 && ascii <= 0xff) {
    for (int a = 0; a < 7; a++) {               // Loop 7 times for a 5x7 font
      unsigned long c = pgm_read_byte_near(font5x7 + ((ascii - 0x20) * 8) + a);     // Index into character table to get row data
      unsigned long x = bufferLong [a * 2];   // Load current scroll buffer
      x = x | c;                              // OR the new character onto end of current
      bufferLong [a * 2] = x;                 // Store in buffer
    }
    byte count = pgm_read_byte_near(font5x7 + ((ascii - 0x20) * 8) + 7);    // Index into character table for kerning data
    for (byte x = 0; x < count; x++) {
      rotateBufferLong();
      printBufferLong();
      delay(scrollDelay);
    }
  }
}
// Rotate the buffer
void rotateBufferLong() {
  for (int a = 0; a < 7; a++) {               // Loop 7 times for a 5x7 font
    unsigned long x = bufferLong [a * 2];   // Get low buffer entry
    byte b = bitRead(x, 31);                // Copy high order bit that gets lost in rotation
    x = x << 1;                             // Rotate left one bit
    bufferLong [a * 2] = x;                 // Store new low buffer
    x = bufferLong [a * 2 + 1];             // Get high buffer entry
    x = x << 1;                             // Rotate left one bit
    bitWrite(x, 0, b);                      // Store saved bit
    bufferLong [a * 2 + 1] = x;             // Store new high buffer
  }
}
// Display Buffer on LED matrix
void printBufferLong() {
  for (int a = 0; a < 7; a++) {             // Loop 7 times for a 5x7 font
    unsigned long x = bufferLong [a * 2 + 1]; // Get high buffer entry
    byte y = x;                             // Mask off first character
    lc.setRow(3, a, y);                     // Send row to relevent MAX7219 chip
    x = bufferLong [a * 2];                 // Get low buffer entry
    y = (x >> 24);                          // Mask off second character
    lc.setRow(2, a, y);                     // Send row to relevent MAX7219 chip
    y = (x >> 16);                          // Mask off third character
    lc.setRow(1, a, y);                     // Send row to relevent MAX7219 chip
    y = (x >> 8);                           // Mask off forth character
    lc.setRow(0, a, y);                     // Send row to relevent MAX7219 chip
  }
}

//------------------------------------------------------------ function -----------------------------------------------------------------------
void setup_wifi() 
{
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  { 
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

//-----------------------------------------------------------------       MQTT connection ----------------------------------------------------
void reconnect() 
{   
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    for(int cnt=0;cnt<20&&(!client.connected());cnt++)
    {
       Serial.print("Attempting MQTT connection...");
       // Attempt to connect   
       if (client.connect("ESP8266Recive", MQTT_USERNAME, MQTT_KEY)) 
       {
         Serial.println("connected");  
         // Subscribe or resubscribe to a topic
         client.subscribe("Toeykmutt/feeds/pm2-dot-5");
         client.subscribe("Toeykmutt/feeds/temperature");
         
       } else {
                Serial.print("failed, rc=");
                Serial.print(client.state());
                Serial.println(" try again in 5 seconds");
                // Wait 5 seconds before retrying
                 delay(5000);
              }
     }
     if(!client.connected())
        {
           setup_wifi();
        }
  
  }  
}

//-----------------------------------------------------------------         MQTT recieve message -----------------------------------------------------
String callback(char* topic, byte * data, unsigned int length)
{  
  // handle message arrived {
  Data = "";
  Serial.print(topic);
  Serial.print(": ");
    for (int i = 0; i < length; i++) 
    {
      //Serial.print((char)data[i]);
      Data += (char)data[i];   
    }
  Serial.print(Data);
  Serial.println();
  if(String(topic)=="Toeykmutt/feeds/pm2-dot-5")
  {
    PMvalue=Data;    
    String text  =PMvalue +"ug/m!";
    String Pretext = " PM2.5";
    int PreTempNumOne=sizeof(Pretext);
     for(int a=0;a<=PreTempNumOne;a++)
        {
            PM[a]=Pretext[a];           
        }
     scrollMessage(PM);
     delay(1000);   
    int TempNumOne=sizeof(text);
     for(int a=0;a<=TempNumOne;a++)
        {
            PM[a]=text[a];           
        }
      scrollMessage(PM);
      delay(1000);   
  }
  
    if(String(topic)=="Toeykmutt/feeds/temperature")
  {
    Tempvalue=Data;
    String text2 = Tempvalue+"*C";
    String Pretext2 = "  TEMP ";
    int PreTempNumTwo=sizeof(Pretext2);
     for(int b=0;b<=PreTempNumTwo;b++)
        {
            Temp[b]=Pretext2[b];
        }
    scrollMessage(Temp); 
    delay(1000);   
    
    int TempNumTwo=sizeof(text2);
     for(int b=0;b<=TempNumTwo;b++)
        {
            Temp[b]=text2[b];
        }
     scrollMessage(Temp);
     delay(1000);
    
  }
  Serial.print("Temperature "); Serial.print(Tempvalue); Serial.println(" *C");
  Serial.print("PM "); Serial.print(PMvalue); Serial.println(" ppm");
  
}
