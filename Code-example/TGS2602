#include <math.h>
#include <Arduino.h>
#include <SPI.h>
#include <MCP3208.h>
#include <Wire.h> 
#include <ESP8266WiFi.h>
#include <PubSubClient.h>   
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <TridentTD_LineNotify.h>
#include <BlynkSimpleEsp8266.h>
MCP3208 adc(D8); //Analog 
#define LED D1

//------------------------------------------------------------ Blynk --------------------------------------------------------------------------
char auth[] = "huNP2Ec5FopsKa3WrhKEujWng2vDW6Zz";//Blynk
//------------------------------------------------------------ Line  --------------------------------------------------------------------------
#define LINE_TOKEN "ZxhwXtFC3yFdYfmK82DzHBUvPkzpNphEq8VdhFyMAOv"
//------------------------------------------------------------  WiFi --------------------------------------------------------------------------
const char* ssid = "GoogleWiFi_Toilet";
const char* password = "iotiotiot";
WiFiClient wifiClient;
//-------------------------------------------------------------- DHT --------------------------------------------------------------------------
#define DHTPIN            0 
#define DHTTYPE           DHT22  
DHT_Unified dht(DHTPIN, DHTTYPE);
//-------------------------------------------------------------- TGS2602 ----------------------------------------------------------------------
#define         CALIBRATION_SAMPLE_TIMES     (50)    
#define         CALIBRATION_SAMPLE_INTERVAL  (500)                                                   
#define         READ_SAMPLE_INTERVAL         (50)    
#define         READ_SAMPLE_TIMES            (50)     
//----------------------------------------------------    Gas Type   ---------------------------------------------------------------------------------
#define         GAS_C7H8                    (0)     //Toluene
#define         GAS_H2S                     (1)     //Hydrogen Sulfide
#define         GAS_NH3                     (2)     //Ammonia
#define         GAS_C2H5OH                  (3)     //Alcohol, Ethanol
//---------------------------------------------------    Gas curve   ---------------------------------------------------------------------------------
float           C7H8Curve[3]    =  {0.699,-1.046,-0.585}; //TGS2602     (5;0.09)( 10;0.06) 
float           H2S_Curve[3]    =  {-0.523,-0.155,-0.544}; //TGS2602     (0.3,0.7) (3,0.2) 
float           C2H5OH_quarCurve[3] =  {0.602,-0.301,-0.399};//TGS2602  (4,0.5) (7,0.4)  
float           NH3_Curve[3]    =  {0.301,-0.155,-0.367}; //TGS2602   (0.8,1) (0.5,10) (0.3,30)

#define TGS2602 0
float   RL6 = 995; 
float   Ro,b;
float   rs=0;

#define TGS2602_BU 1
float   RL6_BU = 985;
float   Ro_BU;
float   rs_BU=0;
//-------------------------------------------------- MQTT -------------------------------------------------------------------
#define SERVER          "io.adafruit.com"
#define SERVERPORT      1883
#define MQTT_USERNAME   "lovely_numfon"
#define MQTT_KEY        "aio_LqAC90nqPX3qL8JRSRJjbv6ubr4a"
PubSubClient client(wifiClient);

char Toluene[7];
char HySulfide[7];
char Ammonia[7];
char Ethanol[7];

char Toluene_BU[7];
char HySulfide_BU[7];
char Ammonia_BU[7];
char Ethanol_BU[7];

char Temperature[7];
char Humidity[7];

//-------------------------------------------------- TGS --------------------------------------------------------------------
float MQCalibration(int mq_pin,double rl_value)
{
  int i;
  float val=0;

  for (i=0;i<CALIBRATION_SAMPLE_TIMES;i++) 
  {            //take multiple samples
    val = val+MQResistanceCalculation(adc.analogRead(mq_pin),rl_value);
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBRATION_SAMPLE_TIMES;                   //calculate the average value
  //Ro = Rs * sqrt(a/ppm, b) = Rs * exp( ln(a/ppm) / b )
  return val;
 // return  (double)(val*exp((log(pcurve[0]/ppm)/pcurve[1])));

}

//-------------------------------------------------------- Resistance Calculation  --------------------------------------------------------
float MQResistanceCalculation(int raw_adc,float rl_value)
{
   float a =  (float)(((4096*rl_value)/raw_adc)-rl_value); 
   return a;
}

//-------------------------------------------------------- Get gas percentage     ---------------------------------------------------------
float MQGetGasPercentage(float rs_ro_ratio, float ro, int gas_id)
{
 
    if ( gas_id == GAS_C7H8 ) {
      return MQGetPercentage(rs_ro_ratio,ro,C7H8Curve);  //TGS2602
    } else if ( gas_id == GAS_H2S ) {
      return MQGetPercentage(rs_ro_ratio,ro,H2S_Curve);  //TGS2602
    } else if ( gas_id == GAS_NH3 ) {
      return MQGetPercentage(rs_ro_ratio,ro,NH3_Curve);  //TGS2602
    } else if ( gas_id == GAS_C2H5OH ) {
      return MQGetPercentage(rs_ro_ratio,ro,C2H5OH_quarCurve);  //TGS2602
    }    
   
  return 0;
}

//------------------------------------------------------- Read Resistance      ------------------------------------------------------------
float MQRead(int mq_pin,float rl_value)
{
  int i;
  rs = 0;
 
  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQResistanceCalculation(adc.analogRead(mq_pin),rl_value);
    delay(READ_SAMPLE_INTERVAL);
  }
 
  rs = (float)(rs/READ_SAMPLE_TIMES);
 
  return rs;  
}

//------------------------------------------------------ Get persentage      ---------------------------------------------------------------
float  MQGetPercentage(float rs_ro_ratio, float ro, float *pcurve)
{
  b = (float)(pow(10,( (((log(rs_ro_ratio/ro))-pcurve[1])/pcurve[2]) + pcurve[0])));
  return b ;
}
//------------------------------------------------------- TGS2602 begin -----------------------------------------------------------------
int TGS2602begin ()
    {
         Serial.println("");
         Serial.print("Base resistance TGS2602 : "); 
         Ro = MQCalibration(TGS2602,RL6);
         Serial.println(Ro);
    }
    
//------------------------------------------------------- TGS2602_BU begin -----------------------------------------------------------------
int TGS2602_BUbegin ()
    {
         Serial.println("");
         Serial.print("Base resistance TGS2602_BU : "); 
         Ro_BU = MQCalibration(TGS2602_BU,RL6_BU);
         Serial.println(Ro_BU);
    }
 //------------------------------------------------------- TGS 2602 operation-------------------------------------------------------------
int TGS2602operation ()
    {  
      
      Serial.println("------------------------------------------------------TGS2602 --------------------------------------------------");
        float C7H8value;        
        Serial.print("TGS2602:"); 
        Serial.print("C7H8  :");
        C7H8value = MQGetGasPercentage(MQRead(TGS2602,RL6),Ro,GAS_C7H8);
                   
        if(rs/Ro<0.2)
           {
             C7H8value = 100;       
           }
           
        Serial.print(C7H8value);
        Serial.println( "ppm" );
        Serial.print("(rs/Ro) = ");
        Serial.println((rs/Ro));
        
           
        float H2Svalue;
        Serial.print("TGS2602:"); 
        Serial.print("H2S  :"); 
        H2Svalue = MQGetGasPercentage(rs,Ro,GAS_H2S);
         
         if(rs/Ro<0.2)
           {
             H2Svalue = 100;       
           }
           
        Serial.print(H2Svalue);
        Serial.println( "ppm" ); 
        Serial.print("(rs/Ro) = ");
        Serial.println((rs/Ro));
                
        float NH3value;
        Serial.print("TGS2602:"); 
        Serial.print("NH3  :"); 
        NH3value = MQGetGasPercentage(rs,Ro,GAS_NH3); 
                
        if(rs/Ro<0.45)
           {
             NH3value = 100;       
           }
        Serial.print(NH3value);
        Serial.println( "ppm" ); 
        Serial.print("(rs/Ro) = ");
        Serial.println((rs/Ro)); 
        
        float C2H5OHvalue; 
        Serial.print("TGS2602:"); 
        Serial.print("C2H5OH  :");
        C2H5OHvalue = MQGetGasPercentage(rs,Ro,GAS_C2H5OH); 
        
        if(rs/Ro<0.43)
           {
             C2H5OHvalue = 100;       
           }
        Serial.print(C2H5OHvalue);
        Serial.println( "ppm" ); 
        Serial.print("(rs/Ro) ");
        Serial.println((rs/Ro)); 
        delay(1000);

              BlynkC7H8(C7H8value,0); 
              BlynkH2S(H2Svalue,0);
              BlynkNH3(NH3value,0);
              BlynkC2H5OH(C2H5OHvalue,0);  
              MQTT(C7H8value,H2Svalue,NH3value,C2H5OHvalue,0);
              Linenotify(C7H8value,H2Svalue,NH3value,C2H5OHvalue);                
              Serial.println("------------------------------------------------------TGS2602 End--------------------------------------------------");
           }
    
//------------------------------------------------------- TGS2602_BU operation-------------------------------------------------------------
int TGS2602_BUoperation ()
    {   Serial.println("------------------------------------------------------TGS2602_BU --------------------------------------------------");
        float C7H8value_BU;        
        Serial.print("TGS2602_BU:"); 
        Serial.print("C7H8  :");
        C7H8value_BU = MQGetGasPercentage(MQRead(TGS2602_BU,RL6_BU),Ro_BU,GAS_C7H8); 
       
        if(rs/Ro_BU<0.2)
           {
             C7H8value_BU = 100;       
           }      
        Serial.print(C7H8value_BU);
        Serial.println( "ppm" );
        Serial.print("(rs/Ro_BU) = ");
        Serial.println( (rs/Ro_BU));
       
        
        float H2Svalue_BU;
        Serial.print("TGS2602_BU:"); 
        Serial.print("H2S  :"); 
        H2Svalue_BU = MQGetGasPercentage(rs,Ro_BU,GAS_H2S);
        
         if(rs/Ro_BU<0.2)
           {
             H2Svalue_BU = 100;       
           } 
        Serial.print(H2Svalue_BU);
        Serial.println( "ppm" ); 
        Serial.print("(rs/Ro_BU) = ");
        Serial.println((rs/Ro_BU));
        
        float NH3value_BU;
        Serial.print("TGS2602_BU:"); 
        Serial.print("NH3  :"); 
        NH3value_BU = MQGetGasPercentage(rs,Ro_BU,GAS_NH3);
         
        if(rs/Ro_BU<0.45)
           {
             NH3value_BU = 100;       
           }  
        Serial.print(NH3value_BU);
        Serial.println( "ppm" ); 
        Serial.print("(rs/Ro_BU) = ");
        Serial.println((rs/Ro_BU)); 

        float C2H5OHvalue_BU; 
        Serial.print("TGS2602_BU:"); 
        Serial.print("C2H5OH  :");
        C2H5OHvalue_BU = MQGetGasPercentage(rs,Ro_BU,GAS_C2H5OH); 
        
         if(rs/Ro_BU<0.42)
           {
             C2H5OHvalue_BU = 100;       
           }
        Serial.print(C2H5OHvalue_BU);
        Serial.println( "ppm" ); 
        Serial.print("(rs/Ro_BU) ");
        Serial.println((rs/Ro_BU)); 
        delay(1000);
              BlynkC7H8(C7H8value_BU,1); 
              BlynkH2S(H2Svalue_BU,1);
              BlynkNH3(NH3value_BU,1);
              BlynkC2H5OH(C2H5OHvalue_BU,1);
              MQTT(C7H8value_BU,H2Svalue_BU,NH3value_BU,C2H5OHvalue_BU,1);
              Linenotify(C7H8value_BU,H2Svalue_BU,NH3value_BU,C2H5OHvalue_BU);          
              Serial.println("------------------------------------------------------TGS2602_BU End --------------------------------------------------");
 }
       
//-------------------------------------------------------------- WiFi-setup -------------------------------------------------------------------                      
void setup_wifi() 
{
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  { 
    delay(500);    
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
  digitalWrite(LED,HIGH);
}
//-------------------------------------------------------------- DHTset-up --------------------------------------------------------------------
void DHT22begin ()
{
  Serial.println("DHT22 Unified Sensor ");
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.println("Temperature");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" *C");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" *C");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" *C");  
  Serial.println("------------------------------------");
 
  dht.humidity().getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.println("Humidity");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println("%");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println("%");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println("%");  
  Serial.println("------------------------------------");
}
//-------------------------------------------------------- DHT22 system ---------------------------------------------------------------
int DHT22operation ()
{
  float Temp,Humi;
  Serial.println("------------------------------------------------------ DHT 22 --------------------------------------------------");
  sensors_event_t event;  
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println("Error reading temperature!");
  }
  else {   
    Temp = event.temperature;
    Serial.print("Temperature: ");
    Serial.print(Temp);
    Serial.println(" *C");
       }

  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    Serial.println("Error reading humidity!");
  }
  else {
    Humi = event.relative_humidity;
    Serial.print("Humidity: ");
    Serial.print(Humi);
    Serial.println("%");
  }
  delay(1000);  
                  
  if(Temp==0||Humi==0)
    {
      return 0;           
    }
  BlynkDHT(Temp,Humi);

  if (!client.connected()) 
  {
    reconnect();
  }
  if(!client.loop())
  {
    client.connect("ESP8266Sending", MQTT_USERNAME, MQTT_KEY);
  }  
              Serial.println("Starting publish...");            
              String Tempval =(String)Temp;
              Tempval.toCharArray(Temperature,7);  
              String Humival =(String)Humi;
              Humival.toCharArray(Humidity,7);
              if(Temp==0||Humi==0)
              {
                return 0;           
              }
              client.publish("lovely_numfon/feeds/temperature",Temperature);
              delay(1100);
              client.publish("lovely_numfon/feeds/humidity",Humidity);  
              delay(1100);
              Serial.println(" publish complete ");           
  Serial.println("------------------------------------------------------DHT22 End --------------------------------------------------");
}

void BlynkDHT(float Temp,float Humi)
{
  Blynk.run();
  
  if(Temp<=26)
  {
    Blynk.setProperty(V1,"color","#228B22");
  }
  else if(Temp>26&&Temp<=35)
  {
    Blynk.setProperty(V1,"color","#FF8C00");
  }
  else
  {
    Blynk.setProperty(V1,"color","#FF0000");
  } 
    Blynk.virtualWrite(V1,Temp);
    Blynk.virtualWrite(V0,Humi);
}



void BlynkC7H8(float Gas,int type)
{ 
  Blynk.run();
  
  int V;
  if(type ==0)
  {
    V = 2;
  }
  else
  {
    V = 6; 
  }
  if(Gas<=10)
  {
    Blynk.setProperty(V,"color","#228B22");
  }
  else if(Gas>10&&Gas<=50)
  {
    Blynk.setProperty(V,"color","#FF8C00");
  }
  else
  {
    Blynk.setProperty(V,"color","#FF0000");
  }
  
    Blynk.virtualWrite(V,Gas);  
}
void BlynkH2S(float Gas,int type)
{  
  Blynk.run();
  
   int V;
  if(type ==0)
  {
    V = 3;
  }
  else
  {
    V = 7; 
  }
  if(Gas<=10)
  {
    Blynk.setProperty(V,"color","#228B22");
  }
  else if(Gas>10&&Gas<=50)
  {
    Blynk.setProperty(V,"color","#FF8C00");
  }
  else
  {
    Blynk.setProperty(V,"color","#FF0000");
  }
  
    Blynk.virtualWrite(V,Gas);  
}

  void BlynkNH3(float Gas,int type)
{  
  Blynk.run();
  
   int V;
  if(type ==0)
  {
    V = 4;
  }
  else
  {
    V = 8; 
  }
  if(Gas<=10)
  {
    Blynk.setProperty(V,"color","#228B22");
  }
  else if(Gas>10&&Gas<=50)
  {
    Blynk.setProperty(V,"color","#FF8C00");
  }
  else
  {
    Blynk.setProperty(V,"color","#FF0000");
  }
  
    Blynk.virtualWrite(V,Gas);  
}

void BlynkC2H5OH(float Gas,int type)
{ 
  Blynk.run();
  
   int V;
  if(type ==0)
  {
    V = 5;
  }
  else
  {
    V = 9; 
  } 
  if(Gas<=10)
  {
    Blynk.setProperty(V,"color","#228B22");
  }
  else if(Gas>10&&Gas<=50)
  {
    Blynk.setProperty(V,"color","#FF8C00");
  }
  else
  {
    Blynk.setProperty(V,"color","#FF0000");
  }
  
    Blynk.virtualWrite(V,Gas);  
}

void reconnect() 
{  
  digitalWrite(LED,LOW);
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    for(int cnt=0;cnt<20&&(!client.connected());cnt++)
    {
       Serial.print("Attempting MQTT connection...");
       // Attempt to connect   
       if (client.connect("ESP8266Sending", MQTT_USERNAME, MQTT_KEY)) 
       {
         Serial.println("connected");  
         // Subscribe or resubscribe to a topic
         digitalWrite(LED,HIGH);

       } else {
                Serial.print("failed, rc=");
                Serial.print(client.state());
                Serial.println(" try again in 5 seconds");
                // Wait 5 seconds before retrying
                 delay(5000);
              }
     }
     if(!client.connected())
        {
           setup_wifi();
        }
  
  }  
}

void MQTT(float C7H8,float H2S,float NH3,float C2H5OH,int type)
{
   if (!client.connected()) 
  {
    reconnect();
  }
  if(!client.loop())
  {
    client.connect("ESP8266Sending", MQTT_USERNAME, MQTT_KEY);
  }  
              if(type==0)
              {
                Serial.println("Starting publish...");            
                String C7H8val =(String)C7H8;
                C7H8val.toCharArray(Toluene,7);  
                String H2Sval =(String)H2S;
                H2Sval.toCharArray(HySulfide,7);
                String NH3val =(String)NH3;
                NH3val.toCharArray(Ammonia,7);
                String C2H5OHval =(String)C2H5OH;
                C2H5OHval.toCharArray(Ethanol,7);
                client.publish("lovely_numfon/feeds/toluene",Toluene);
                delay(1100);
                client.publish("lovely_numfon/feeds/h2s",HySulfide); 
                delay(1100);
                client.publish("lovely_numfon/feeds/nh3",Ammonia);  
                delay(1100);  
                client.publish("lovely_numfon/feeds/ethanol",Ethanol);
                Serial.println(" publish complete ");
              }
              else
              {
                Serial.println("Starting publish...");            
                String C7H8val_BU =(String)C7H8;
                C7H8val_BU.toCharArray(Toluene_BU,7);  
                String H2Sval_BU =(String)H2S;
                H2Sval_BU.toCharArray(HySulfide_BU,7);
                String NH3val_BU =(String)NH3;
                NH3val_BU.toCharArray(Ammonia_BU,7);
                String C2H5OHval_BU =(String)C2H5OH;
                C2H5OHval_BU.toCharArray(Ethanol_BU,7);
              
                client.publish("lovely_numfon/feeds/toluene-bu",Toluene_BU);
                delay(1100);
                client.publish("lovely_numfon/feeds/h2s-bu",HySulfide_BU); 
                delay(1100);
                client.publish("lovely_numfon/feeds/nh3-bu",Ammonia_BU);
                delay(1100);    
                client.publish("lovely_numfon/feeds/ethanol-bu",Ethanol_BU);
                Serial.println(" publish complete ");
              }
                
}
void Linenotify (float C7H8,float H2S,float NH3,float C2H5O )
{
   LINE.setToken(LINE_TOKEN);
  
  String Toluene =(String)C7H8;
  String Sulfide =(String)H2S;
  String Ammonia =(String)NH3;
  String Ethanol =(String)C2H5O;
  if(C7H8>10)
  {
     LINE.notify("Warnning Toluene gas over "+ Toluene + " ppm. " );
  }
  if(H2S>10)
  {
     LINE.notify("Warnning Hydrogensulfide gas over "+ Sulfide + " ppm. " );
  }
   if(NH3>10)
  {
     LINE.notify("Warnning Ammonia gas over" + Ammonia + " ppm. " );
  }
  if(C2H5O>10)
  {
     LINE.notify("Warnning Ethanol gas over "+ Ethanol + " ppm. " );
  }
}
void setup() 
{   
    Serial.begin(9600);
    WiFi.mode(WIFI_STA);
    setup_wifi();
    Blynk.begin(auth, ssid, password);
    client.setServer(SERVER,SERVERPORT);
    dht.begin();
    adc.begin();
    pinMode(LED,OUTPUT);
    Serial.println(LINE.getVersion());
    
    
    DHT22begin;   
    TGS2602begin();
    TGS2602_BUbegin();  
}

void loop() {
   
   DHT22operation ();
   TGS2602operation (); 
   TGS2602_BUoperation();
   delay(3000);
 
}
